"""
@author: Suresh Rajagopal
 
Developing automation pipeline to ingest and calculate data in BigData Platform using Hadoop, Hive and Spark.
"""

from os.path import expanduser, join, abspath

from pyspark.sql import SparkSession
from pyspark.sql import Row
from pyspark.sql import functions as func

warehouse_location = abspath('spark-warehouse')

spark = SparkSession \
    .builder \
    .appName("Health_Average_Calculation") \
    .config("spark.sql.warehouse.dir", warehouse_location) \
    .enableHiveSupport() \
    .getOrCreate()

# Read data from source hive table
recordDF = spark.sql("SELECT yearstart AS year, question, gender, `age(months)` AS age_group, CAST(data_value as INT) as value FROM health_record")

# checking schema & data in the console
recordDF.printSchema()
recordDF.show(5)

# remove header from hive table & create dataframe
header = recordDF.first()
withoutHeader = recordDF.rdd.filter(lambda line: line!=header)
healthDF = spark.createDataFrame(withoutHeader)

# Register source dataframe as temp table
healthDF.registerTempTable("health_record");

# Calcualte Average of question's by year for all age group
health_age_group_avg = healthDF.groupBy("question", "year", "age_group").avg("value").select("question", "year", "age_group", func.col("avg(value)").alias("value"))

# Write average calculated result into destination Hive table
health_age_group_avg.write.mode('overwrite').saveAsTable('result.age_group_average');

# Calcualte Average of question's by year for female only
female_filterDF = healthDF.filter(healthDF.gender == 'Female')
female_averageDF = female_filterDF.groupBy('question', 'year').avg('value').select("question", "year", func.col("avg(value)").alias("average"))

# Write average calculated for female result into destination Hive table
female_averageDF.write.mode('overwrite').saveAsTable('result.female_average');

